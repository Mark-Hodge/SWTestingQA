@{
    ViewData["Title"] = "Development Lifecyle Information";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<p>
    The following tools were determined to be most effective in realizing the goals of
    this project. These tools made it easy to implement a
    continous integration/development pipeline. Taking advantage of static code analysis
    during build and automated unit tests run before deployment to the staging branch.
    Automatic deployment to a staging environment where end-to-end UI tests are executed
    automatically, ensuring full accesibility and proper functionality of elements prior
    to approval of deployment to the production environment upon commit to the master branch.
</p>
<br />

<h4>Development Environment</h4>
<h5>Local System</h5>
<p style="margin-left: 40px">Windows 10 Pro v1903</p>
<p style="margin-left: 40px">Visual Studio 2019, Community Addition</p>
<h5>Framework</h5>
<p style="margin-left: 40px">ASP.NET Core 2.1</p>
<h5>Static Analysis</h5>
<p style="margin-left: 40px">Microsoft Code Analysis v2.9.8</p>

<br />
<h4>Deployment Pipeline</h4>
<h5>Source Control</h5>
<p style="margin-left: 40px">Github <a href="https://github.com/Mark-Hodge/SWTestingQA">Remote Repository</a></p>
<h5>Azure DevOps Pipeline</h5>
<p style="margin-left: 40px">Automated Build On Commit</p>
<p style="margin-left: 40px">Code Coverage Reporting - Coverlet v2.8.0 with Covetura formatting</p>
<p style="margin-left: 40px">Automated Unit Testing - Microsoft Test Framework .NET Core</p>
<p style="margin-left: 40px">Deploy Automatically to Azure App Service - Staging Environment</p>
<p style="margin-left: 40px">Automated End-To-End Testing - <a href="https://testproject.io/">Test Project</a></p>
<p style="margin-left: 40px">Deploy On Approval to Azure App Service - Production Environment</p>